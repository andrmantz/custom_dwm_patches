diff --git a/config.def.h b/config.def.h
index 1c0b587..063c38a 100644
--- a/config.def.h
+++ b/config.def.h
@@ -31,6 +31,12 @@ static const Rule rules[] = {
 	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
 };
 
+static const Match matches[] = {
+  /*   name               app_name  */
+  {    "st",              "st"             },
+  { "firefox",            "Firefox"        },
+};
+
 /* layout(s) */
 static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
@@ -84,6 +90,8 @@ static Key keys[] = {
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+	{ MODKEY,                       XK_s,      findclient,     {.v = &matches[0]} },
+	{ MODKEY,                       XK_o,      findclient,     {.v = &matches[1]} },
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
diff --git a/dwm.c b/dwm.c
index 4465af1..280792b 100644
--- a/dwm.c
+++ b/dwm.c
@@ -141,6 +141,11 @@ typedef struct {
 	int monitor;
 } Rule;
 
+typedef struct {
+  char name[256];
+  char app_name[256];
+} Match;
+
 /* function declarations */
 static void applyrules(Client *c);
 static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
@@ -165,6 +170,7 @@ static void drawbar(Monitor *m);
 static void drawbars(void);
 static void enternotify(XEvent *e);
 static void expose(XEvent *e);
+static void findclient(const Arg *arg);
 static void focus(Client *c);
 static void focusin(XEvent *e);
 static void focusmon(const Arg *arg);
@@ -780,6 +786,45 @@ expose(XEvent *e)
 		drawbar(m);
 }
 
+void
+findclient(const Arg *arg)
+{
+	if (!arg || !arg->v )
+		return;
+
+	Match *temp = (Match *) arg->v;
+
+	if (selmon->clients){
+		Arg shiftit;
+		Client *c; 
+		unsigned int used_tags=0;
+		for (c=selmon->clients; c; c= c->next){
+			used_tags |= c->tags == 255 ? 0 : c->tags;
+			if (strstr(c->name, temp->app_name)){
+				shiftit.ui = c->tags;
+				view(&shiftit);
+				return;
+			}
+		}
+		unsigned int i;
+		for (i=0; i < LENGTH(tags); i++){
+			if (!(used_tags & 1 << i)){
+				shiftit.ui = 1 << i;
+				view(&shiftit);
+				break;
+			}
+		}
+	}
+
+	const char *new[] = { temp->name , NULL };
+	if (fork() ==0){
+		setsid();
+		execvp(((char **)new)[0], (char **)new);
+		perror(" failed");
+		exit(EXIT_SUCCESS);
+	}
+}
+
 void
 focus(Client *c)
 {
